{"ast":null,"code":"import { CART_ADD_ITEM, CART_REMOVE_ITEM } from \"../constants/cartConstants\";\nexport const cartReducer = (state = {\n  cartItems: []\n}, action) => {\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      const newItem = action.payload;\n      const existItem = state.cartItems.find(x => x.product === newItem.product);\n\n      if (existItem) {\n        return { ...state,\n          cartItems: [state.cartItems].map(x => x.product === existItem.product ? newItem : x)\n        };\n      }\n\n      return { ...state,\n        cartItems: [...state.cartItems, newItem]\n      };\n\n    case CART_REMOVE_ITEM:\n      return { ...state,\n        cartItems: state.cartItems.filter(x => x.product !== action.payload)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/antonioloza/Desktop/MERNProject/frontend/src/reducers/cartReducers.js"],"names":["CART_ADD_ITEM","CART_REMOVE_ITEM","cartReducer","state","cartItems","action","type","newItem","payload","existItem","find","x","product","map","filter"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,gBAAxB,QAAgD,4BAAhD;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAAT,EAA4BC,MAA5B,KAAwC;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,aAAL;AACI,YAAMO,OAAO,GAAGF,MAAM,CAACG,OAAvB;AAEA,YAAMC,SAAS,GAAGN,KAAK,CAACC,SAAN,CAAgBM,IAAhB,CACbC,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcL,OAAO,CAACK,OADf,CAAlB;;AAGA,UAAIH,SAAJ,EAAe;AACX,eAAO,EACH,GAAGN,KADA;AAEHC,UAAAA,SAAS,EAAE,CAACD,KAAK,CAACC,SAAP,EAAkBS,GAAlB,CAAuBF,CAAD,IAC7BA,CAAC,CAACC,OAAF,KAAcH,SAAS,CAACG,OAAxB,GACEL,OADF,GAEEI,CAHK;AAFR,SAAP;AAQH;;AACG,aAAO,EACH,GAAGR,KADA;AAEHC,QAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBG,OAArB;AAFR,OAAP;;AAKR,SAAKN,gBAAL;AACQ,aAAO,EACH,GAAGE,KADA;AAEHC,QAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBU,MAAhB,CAAuBH,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcP,MAAM,CAACG,OAAjD;AAFR,OAAP;;AAIR;AACI,aAAOL,KAAP;AA5BR;AA8BH,CA/BM","sourcesContent":["import { CART_ADD_ITEM, CART_REMOVE_ITEM } from \"../constants/cartConstants\"\n\nexport const cartReducer = (state = { cartItems: [] }, action ) => {\n    switch (action.type) {\n        case CART_ADD_ITEM:\n            const newItem = action.payload\n\n            const existItem = state.cartItems.find(\n                (x) => x.product === newItem.product)\n\n            if (existItem) {\n                return {\n                    ...state,\n                    cartItems: [state.cartItems].map((x) => \n                        x.product === existItem.product \n                        ? newItem \n                        : x\n                    ),\n                }\n            } \n                return {\n                    ...state,\n                    cartItems: [...state.cartItems, newItem]\n\n                }\n        case CART_REMOVE_ITEM:\n                return {\n                    ...state,\n                    cartItems: state.cartItems.filter(x => x.product !== action.payload)\n                }\n        default: \n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}