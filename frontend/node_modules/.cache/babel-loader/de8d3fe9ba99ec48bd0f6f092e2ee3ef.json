{"ast":null,"code":"import axios from 'axios';\nimport { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_RESET, USER_DETAILS_SUCCESS, USER_LIST_FAIL, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_RESET, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAIL } from \"../constants/userConstants\";\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  });\n  dispatch({\n    type: ORDER_LIST_MY_RESET\n  });\n  dispatch({\n    type: USER_LIST_RESET\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/users/profile', user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get('/api/users/', config);\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteUser = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateUser = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_UPDATE_SUCCESS\n    });\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/antonioloza/Desktop/MERNProject/frontend/src/actions/userActions.js"],"names":["axios","USER_DETAILS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_RESET","USER_DETAILS_SUCCESS","USER_LIST_FAIL","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_RESET","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","ORDER_LIST_MY_RESET","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put","listUsers","deleteUser","delete","updateUser","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL"],"mappings":"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","sourcesContent":["import axios from  'axios'\nimport { USER_DETAILS_FAIL, \n        USER_DETAILS_REQUEST, \n        USER_DETAILS_RESET, \n        USER_DETAILS_SUCCESS, \n        USER_LIST_FAIL, \n        USER_LIST_REQUEST, \n        USER_LIST_SUCCESS, \n        USER_LIST_RESET,\n        USER_LOGIN_FAIL, \n        USER_LOGIN_REQUEST, \n        USER_LOGIN_SUCCESS, \n        USER_LOGOUT, \n        USER_REGISTER_FAIL, \n        USER_REGISTER_REQUEST, \n        USER_REGISTER_SUCCESS, \n        USER_UPDATE_PROFILE_FAIL, \n        USER_UPDATE_PROFILE_REQUEST, \n        USER_UPDATE_PROFILE_SUCCESS, \n        USER_DELETE_REQUEST,\n        USER_DELETE_SUCCESS,\n        USER_DELETE_FAIL\n        } from \"../constants/userConstants\"\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants' \n\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_LOGIN_REQUEST,\n        })\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n        const { data } = await axios.post(\n            '/api/users/login', \n            { email, password }, \n            config\n        )\n\n        dispatch ({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n    } catch (error) {\n        dispatch ({\n            type: USER_LOGIN_FAIL,\n            payload: \n            error.response && error.response.data.message \n                ? error.response.data.message \n                : error.message,\n        })\n    }\n}\n\nexport const logout = () => (dispatch) => {\n    localStorage.removeItem('userInfo')\n    dispatch({ type: USER_LOGOUT })\n    dispatch({ type: USER_DETAILS_RESET })\n    dispatch({ type: ORDER_LIST_MY_RESET })\n    dispatch({ type: USER_LIST_RESET })\n}\n\nexport const register = (name, email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST,\n        })\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n        const { data } = await axios.post(\n            '/api/users', \n            {name, email, password}, \n            config\n        )\n\n        dispatch ({\n            type: USER_REGISTER_SUCCESS,\n            payload: data\n        })\n\n        dispatch ({\n            type: USER_LOGIN_SUCCESS,\n            payload: data,\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n        \n    } catch (error) {\n        dispatch ({\n            type: USER_REGISTER_FAIL,\n            payload: \n            error.response && error.response.data.message \n                ? error.response.data.message \n                : error.message,\n        })\n    }\n}\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DETAILS_REQUEST,\n        })\n\n        const { userLogin: { userInfo } } = getState()\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        }\n\n        const { data } = await axios.get(`/api/users/${id}`, config)\n\n        dispatch ({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n        \n    } catch (error) {\n        dispatch ({\n            type: USER_DETAILS_FAIL,\n            payload: \n            error.response && error.response.data.message \n                ? error.response.data.message \n                : error.message,\n        })\n    }\n}\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST,\n        })\n\n        const { userLogin: { userInfo }, \n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        }\n\n        const { data } = await axios.put('/api/users/profile', user, config)\n\n        dispatch ({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data\n        })\n        localStorage.setItem('userInfo', JSON.stringify(data))\n    } catch (error) {\n        dispatch ({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: \n            error.response && error.response.data.message \n                ? error.response.data.message \n                : error.message,\n        })\n    }\n}\n\nexport const listUsers = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_LIST_REQUEST,\n        })\n\n        const { userLogin: { userInfo }, \n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        }\n\n        const { data } = await axios.get('/api/users/', config)\n\n        dispatch ({\n            type: USER_LIST_SUCCESS,\n            payload: data,\n        })\n    } catch (error) {\n        dispatch ({\n            type: USER_LIST_FAIL,\n            payload: \n            error.response && error.response.data.message \n                ? error.response.data.message \n                : error.message,\n        })\n    }\n}\n\nexport const deleteUser = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DELETE_REQUEST,\n        })\n\n        const { userLogin: { userInfo }, \n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        }\n\n        await axios.delete(`/api/users/${id}`, config)\n\n        dispatch ({type: USER_DELETE_SUCCESS })\n\n    } catch (error) {\n        dispatch ({\n            type: USER_DELETE_FAIL,\n            payload: \n            error.response && error.response.data.message \n                ? error.response.data.message \n                : error.message,\n        })\n    }\n}\n\nexport const updateUser = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_REQUEST,\n        })\n\n        const { userLogin: { userInfo }, \n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        }\n\n        const { data } = await axios.put(`/api/users/${id}`, config)\n\n        dispatch ({type: USER_UPDATE_SUCCESS })\n        dispatch ({type: USER_DETAILS_SUCCESS, payload: data })\n\n    } catch (error) {\n        dispatch ({\n            type: USER_UPDATE_FAIL,\n            payload: \n            error.response && error.response.data.message \n                ? error.response.data.message \n                : error.message,\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}