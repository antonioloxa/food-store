{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer } from './reducers/userReducers';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderListMyReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userList: userListReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderListMy: orderListMyReducer\n});\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk]; //start reducuer with initial state spreading the middleware with the spread operator \n//into an array\n\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/Users/antonioloza/Desktop/MERNProject/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","userListReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","orderListMyReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userDetails","userUpdateProfile","userList","orderCreate","orderDetails","orderPay","orderListMy","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACIC,kBADJ,EAEKC,qBAFL,QAGW,4BAHX;AAIA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,gBAAT,EACQC,mBADR,EAEQC,kBAFR,EAGQC,wBAHR,EAIQC,eAJR,QAI+B,yBAJ/B;AAKA,SAASC,kBAAT,EACQC,mBADR,EAEQC,eAFR,EAGQC,kBAHR,QAGkC,0BAHlC;AAKA,MAAMC,OAAO,GAAGhB,eAAe,CAAC;AAC5BiB,EAAAA,WAAW,EAAEb,kBADe;AAE5Bc,EAAAA,cAAc,EAAEb,qBAFY;AAG5Bc,EAAAA,IAAI,EAAEb,WAHsB;AAI5Bc,EAAAA,SAAS,EAAEb,gBAJiB;AAK5Bc,EAAAA,YAAY,EAAEb,mBALc;AAM5Bc,EAAAA,WAAW,EAAEb,kBANe;AAO5Bc,EAAAA,iBAAiB,EAAEb,wBAPS;AAQ5Bc,EAAAA,QAAQ,EAAEb,eARkB;AAS5Bc,EAAAA,WAAW,EAAEb,kBATe;AAU5Bc,EAAAA,YAAY,EAAEb,mBAVc;AAW5Bc,EAAAA,QAAQ,EAAEb,eAXkB;AAY5Bc,EAAAA,WAAW,EAAEb;AAZe,CAAD,CAA/B;AAgBA,MAAMc,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAC3BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAD2B,GACqB,EADlD;AAGA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IAC1BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAD0B,GAE1B,IAFF;AAKA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IACjCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CADiC,GAEjC,EAFF;AAIA,MAAMK,YAAY,GAAG;AACjBjB,EAAAA,IAAI,EAAE;AACFkB,IAAAA,SAAS,EAAER,oBADT;AAEFS,IAAAA,eAAe,EAAEH;AAFf,GADW;AAKjBf,EAAAA,SAAS,EAAE;AAAEmB,IAAAA,QAAQ,EAAEL;AAAZ;AALM,CAArB;AAQA,MAAMM,UAAU,GAAG,CAACtC,KAAD,CAAnB,C,CAEA;AACA;;AAEA,MAAMuC,KAAK,GAAG1C,WAAW,CACrBiB,OADqB,EAErBoB,YAFqB,EAGrBjC,mBAAmB,CAACF,eAAe,CAAC,GAAGuC,UAAJ,CAAhB,CAHE,CAAzB;AAKA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { \n    productListReducer,\n     productDetailsReducer \n    } from './reducers/productReducers'\nimport { cartReducer } from './reducers/cartReducers'\nimport { userLoginReducer, \n        userRegisterReducer, \n        userDetailsReducer, \n        userUpdateProfileReducer,\n        userListReducer } from './reducers/userReducers'\nimport { orderCreateReducer, \n        orderDetailsReducer, \n        orderPayReducer, \n        orderListMyReducer } from './reducers/orderReducers'\n\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n    cart: cartReducer,\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n    userDetails: userDetailsReducer,\n    userUpdateProfile: userUpdateProfileReducer,\n    userList: userListReducer,\n    orderCreate: orderCreateReducer,\n    orderDetails: orderDetailsReducer,\n    orderPay: orderPayReducer,\n    orderListMy: orderListMyReducer,\n    \n})\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') \n? JSON.parse(localStorage.getItem('cartItems')) : []\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') \n? JSON.parse(localStorage.getItem('userInfo')) \n: null\n\n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') \n? JSON.parse(localStorage.getItem('shippingAddress')) \n: {}\n\nconst initialState = {\n    cart: { \n        cartItems: cartItemsFromStorage,\n        shippingAddress: shippingAddressFromStorage\n    },\n    userLogin: { userInfo: userInfoFromStorage}\n}\n\nconst middleware = [thunk]\n\n//start reducuer with initial state spreading the middleware with the spread operator \n//into an array\n\nconst store = createStore(\n    reducer, \n    initialState, \n    composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store"]},"metadata":{},"sourceType":"module"}